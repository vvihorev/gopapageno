// Code generated by Gopapageno; DO NOT EDIT.
package xpath

import (
	"github.com/giornetta/gopapageno"
	"strings"
	"fmt"
	"os"
)

type peSemValue struct {
	pe_id   int
	builder builder
}

func notNode(pred predicate) predicate {
	node := predNode{op: not()}
	pred.root.parent = &node
	pred.root = &node
	return pred
}

func newAtom(pe_id int) predicate {
	node := predNode{op: atom()}
	return predicate{root: &node, undoneAtoms: map[int]*predNode{pe_id: &node}}
}

func combine(op operator, dst predicate, src predicate) predicate {
	node := predNode{op: op}
	dst.root.parent = &node
	src.root.parent = &node

	for k, v := range src.undoneAtoms {
		dst.undoneAtoms[k] = v
	}
	dst.root = &node
	return dst
}

func (pe peSemValue) end() int {
	switch pe.builder.(type) {
	case *fpeBuilder:
		pe_id, _ := udpeGlobalTable.addFpe(pe.builder.(*fpeBuilder).end())
		return pe_id
	case *rpeBuilder:
		pe_id, _ := udpeGlobalTable.addRpe(pe.builder.(*rpeBuilder).end())
		return pe_id
	default:
		panic("something worong")
	}
}

func appendStep(pe *peSemValue, step udpeTest, axis axis) *peSemValue {
	if pe == nil {
		pe = &peSemValue{}
		if axis == child || axis == descendantOrSelf {
			pe.builder = &fpeBuilder{}
		} else {
			pe.builder = &rpeBuilder{}
		}

		pe.builder.addAxis(axis)
		pe.builder.addUdpeTest(step)
		return pe
	}

	switch pe.builder.(type) {
	case *fpeBuilder:
		if axis == parent || axis == ancestorOrSelf {
			pe.pe_id, _ = udpeGlobalTable.addFpe(pe.builder.(*fpeBuilder).end())
			pe.builder = &rpeBuilder{}
		} else {
			pe.builder = pe.builder.(*fpeBuilder)
		}
	case *rpeBuilder:
		if axis == child || axis == descendantOrSelf {
			pe.pe_id, _ = udpeGlobalTable.addRpe(pe.builder.(*rpeBuilder).end())
			pe.builder = &fpeBuilder{}
		} else {
			pe.builder = pe.builder.(*rpeBuilder)
		}
	default:
		panic("something worong")
	}

	pe.builder.addAxis(axis)
	pe.builder.addUdpeTest(step)
	return pe
}

// TODO(vvihorev): integrate NUDPE support
// globalNudpe := nudpeGlobalTable.addNudpeRecord(udpeCount)
// for i := range udpeGlobalTable.size() {
// 	udpeGlobalTable.list[i].setNudpeRecord(globalNudpe)
// }

// var parserElementsPools []*gopapageno.Pool[xpath.Element]

// ParserPreallocMem initializes all the memory pools required by the semantic function of the parser.
func ParserPreallocMem(inputSize int, numThreads int) {
    // poolSizePerThread := 10000

    // parserElementsPools = make([]*gopapageno.Pool[xpath.Element], numThreads)
    // for i := 0; i < numThreads; i++ {
    //     parserElementsPools[i] = gopapageno.NewPool[xpath.Element](poolSizePerThread)
    // }
}


// Non-terminals
const (
	AndExpr_Factor_OrExpr = gopapageno.TokenEmpty + 1 + iota
	AndExpr_Factor_OrExpr_Path
	AndExpr_OrExpr
	OrExpr
	Query
	Step
	Step_Test
)

// Terminals
const (
	ANCESTOR = gopapageno.TokenTerm + 1 + iota
	AND
	AT
	CHILD
	DESCENDANT
	EQ
	IDENT
	LBR
	LPAR
	NOT
	OR
	PARENT
	RBR
	RPAR
	STRING
	TEXT
)

func DumpGraph[ValueType any](root *gopapageno.Token, f *os.File) {
	sb := strings.Builder{}
	sb.WriteString("digraph parse_tree {\n")
	sb.WriteString("ratio = fill;\n")
	sb.WriteString("node [style=filled];\n")

	var graphPrintRec func(t *gopapageno.Token, p *gopapageno.Token, sb *strings.Builder, i int)
	graphPrintRec = func(t *gopapageno.Token, p *gopapageno.Token, sb *strings.Builder, i int) {
		if t == nil {
			return
		}

		if p == nil {
			graphPrintRec(t.Child, t, sb, i+1)
			return
		}

		var t_name, t_color, p_name, p_color string

		switch p.Type {
		case AndExpr_Factor_OrExpr:
			p_name, p_color = "AndExpr_Factor_OrExpr", "0.408 0.498 1.000"
		case AndExpr_Factor_OrExpr_Path:
			p_name, p_color = "AndExpr_Factor_OrExpr_Path", "0.408 0.498 1.000"
		case AndExpr_OrExpr:
			p_name, p_color = "AndExpr_OrExpr", "0.408 0.498 1.000"
		case OrExpr:
			p_name, p_color = "OrExpr", "0.408 0.498 1.000"
		case Query:
			p_name, p_color = "Query", "0.408 0.498 1.000"
		case Step:
			p_name, p_color = "Step", "0.408 0.498 1.000"
		case Step_Test:
			p_name, p_color = "Step_Test", "0.408 0.498 1.000"
		case gopapageno.TokenEmpty:
			p_name, p_color = "__EMPTY__", "0.408 0.498 1.000"
		case ANCESTOR:
			p_name, p_color = "ANCESTOR", "0.641 0.212 1.000"
		case AND:
			p_name, p_color = "AND", "0.641 0.212 1.000"
		case AT:
			p_name, p_color = "AT", "0.641 0.212 1.000"
		case CHILD:
			p_name, p_color = "CHILD", "0.641 0.212 1.000"
		case DESCENDANT:
			p_name, p_color = "DESCENDANT", "0.641 0.212 1.000"
		case EQ:
			p_name, p_color = "EQ", "0.641 0.212 1.000"
		case IDENT:
			p_name, p_color = "IDENT", "0.641 0.212 1.000"
		case LBR:
			p_name, p_color = "LBR", "0.641 0.212 1.000"
		case LPAR:
			p_name, p_color = "LPAR", "0.641 0.212 1.000"
		case NOT:
			p_name, p_color = "NOT", "0.641 0.212 1.000"
		case OR:
			p_name, p_color = "OR", "0.641 0.212 1.000"
		case PARENT:
			p_name, p_color = "PARENT", "0.641 0.212 1.000"
		case RBR:
			p_name, p_color = "RBR", "0.641 0.212 1.000"
		case RPAR:
			p_name, p_color = "RPAR", "0.641 0.212 1.000"
		case STRING:
			p_name, p_color = "STRING", "0.641 0.212 1.000"
		case TEXT:
			p_name, p_color = "TEXT", "0.641 0.212 1.000"
		case gopapageno.TokenTerm:
			p_name, p_color = "__TERM__", "0.641 0.212 1.000"
		}

		switch t.Type {
		case AndExpr_Factor_OrExpr:
			t_name, t_color = "AndExpr_Factor_OrExpr", "0.408 0.498 1.000"
		case AndExpr_Factor_OrExpr_Path:
			t_name, t_color = "AndExpr_Factor_OrExpr_Path", "0.408 0.498 1.000"
		case AndExpr_OrExpr:
			t_name, t_color = "AndExpr_OrExpr", "0.408 0.498 1.000"
		case OrExpr:
			t_name, t_color = "OrExpr", "0.408 0.498 1.000"
		case Query:
			t_name, t_color = "Query", "0.408 0.498 1.000"
		case Step:
			t_name, t_color = "Step", "0.408 0.498 1.000"
		case Step_Test:
			t_name, t_color = "Step_Test", "0.408 0.498 1.000"
		case gopapageno.TokenEmpty:
			t_name, t_color = "__EMPTY__", "0.408 0.498 1.000"
		case ANCESTOR:
			t_name, t_color = "ANCESTOR", "0.641 0.212 1.000"
		case AND:
			t_name, t_color = "AND", "0.641 0.212 1.000"
		case AT:
			t_name, t_color = "AT", "0.641 0.212 1.000"
		case CHILD:
			t_name, t_color = "CHILD", "0.641 0.212 1.000"
		case DESCENDANT:
			t_name, t_color = "DESCENDANT", "0.641 0.212 1.000"
		case EQ:
			t_name, t_color = "EQ", "0.641 0.212 1.000"
		case IDENT:
			t_name, t_color = "IDENT", "0.641 0.212 1.000"
		case LBR:
			t_name, t_color = "LBR", "0.641 0.212 1.000"
		case LPAR:
			t_name, t_color = "LPAR", "0.641 0.212 1.000"
		case NOT:
			t_name, t_color = "NOT", "0.641 0.212 1.000"
		case OR:
			t_name, t_color = "OR", "0.641 0.212 1.000"
		case PARENT:
			t_name, t_color = "PARENT", "0.641 0.212 1.000"
		case RBR:
			t_name, t_color = "RBR", "0.641 0.212 1.000"
		case RPAR:
			t_name, t_color = "RPAR", "0.641 0.212 1.000"
		case STRING:
			t_name, t_color = "STRING", "0.641 0.212 1.000"
		case TEXT:
			t_name, t_color = "TEXT", "0.641 0.212 1.000"
		case gopapageno.TokenTerm:
			t_name, t_color = "__TERM__", "0.641 0.212 1.000"
		}

		sb.WriteString(fmt.Sprintf("\"%p\" -> \"%p\";\n", p, t))
		sb.WriteString(fmt.Sprintf("\"%p\" [label=\"%s\" color=\"%s\"];\n", p, p_name, p_color))
		sb.WriteString(fmt.Sprintf("\"%p\" [label=\"%s\" color=\"%s\"];\n", t, t_name, t_color))

		graphPrintRec(t.Child, t, sb, i+1)
		graphPrintRec(t.Next, p, sb, i)
	}
	graphPrintRec(root, nil, &sb, 0)
	sb.WriteString("}\n")

	fmt.Fprint(f, sb.String())
}


func SprintToken[ValueType any](root *gopapageno.Token) string {
	var sprintRec func(t *gopapageno.Token, sb *strings.Builder, indent string)

	sprintRec = func(t *gopapageno.Token, sb *strings.Builder, indent string) {
		if t == nil {
			return
		}

		sb.WriteString(indent)
		if t.Next == nil {
			sb.WriteString("└── ")
			indent += "    "
		} else {
			sb.WriteString("├── ")
			indent += "|   "
		}

		switch t.Type {
		case AndExpr_Factor_OrExpr:
			sb.WriteString("AndExpr_Factor_OrExpr")
		case AndExpr_Factor_OrExpr_Path:
			sb.WriteString("AndExpr_Factor_OrExpr_Path")
		case AndExpr_OrExpr:
			sb.WriteString("AndExpr_OrExpr")
		case OrExpr:
			sb.WriteString("OrExpr")
		case Query:
			sb.WriteString("Query")
		case Step:
			sb.WriteString("Step")
		case Step_Test:
			sb.WriteString("Step_Test")
		case gopapageno.TokenEmpty:
			sb.WriteString("Empty")
		case ANCESTOR:
			sb.WriteString("ANCESTOR")
		case AND:
			sb.WriteString("AND")
		case AT:
			sb.WriteString("AT")
		case CHILD:
			sb.WriteString("CHILD")
		case DESCENDANT:
			sb.WriteString("DESCENDANT")
		case EQ:
			sb.WriteString("EQ")
		case IDENT:
			sb.WriteString("IDENT")
		case LBR:
			sb.WriteString("LBR")
		case LPAR:
			sb.WriteString("LPAR")
		case NOT:
			sb.WriteString("NOT")
		case OR:
			sb.WriteString("OR")
		case PARENT:
			sb.WriteString("PARENT")
		case RBR:
			sb.WriteString("RBR")
		case RPAR:
			sb.WriteString("RPAR")
		case STRING:
			sb.WriteString("STRING")
		case TEXT:
			sb.WriteString("TEXT")
		case gopapageno.TokenTerm:
			sb.WriteString("Term")
		default:
			sb.WriteString("Unknown")
		}

		if t.Value != nil {
			if v, ok := any(t.Value).(*ValueType); ok {
				sb.WriteString(fmt.Sprintf(": %v", *v))
			}
		}
		
		sb.WriteString("\n")
		
		sprintRec(t.Child, sb, indent)
		sprintRec(t.Next, sb, indent[:len(indent)-4])
	}

	var sb strings.Builder
	
	sprintRec(root, &sb, "")
	
	return sb.String()
}

func NewGrammar() *gopapageno.Grammar {
	numTerminals := uint16(17)
	numNonTerminals := uint16(8)

	maxRHSLen := 4
	rules := []gopapageno.Rule{
		{AndExpr_OrExpr, []gopapageno.TokenType{AndExpr_Factor_OrExpr, AND, AndExpr_Factor_OrExpr}, gopapageno.RuleSimple},
		{AndExpr_OrExpr, []gopapageno.TokenType{AndExpr_Factor_OrExpr, AND, AndExpr_Factor_OrExpr_Path}, gopapageno.RuleSimple},
		{OrExpr, []gopapageno.TokenType{AndExpr_Factor_OrExpr, OR, AndExpr_Factor_OrExpr}, gopapageno.RuleSimple},
		{OrExpr, []gopapageno.TokenType{AndExpr_Factor_OrExpr, OR, AndExpr_Factor_OrExpr_Path}, gopapageno.RuleSimple},
		{OrExpr, []gopapageno.TokenType{AndExpr_Factor_OrExpr, OR, AndExpr_OrExpr}, gopapageno.RuleSimple},
		{AndExpr_Factor_OrExpr_Path, []gopapageno.TokenType{AndExpr_Factor_OrExpr_Path, ANCESTOR, Step}, gopapageno.RuleSimple},
		{AndExpr_Factor_OrExpr_Path, []gopapageno.TokenType{AndExpr_Factor_OrExpr_Path, ANCESTOR, Step_Test}, gopapageno.RuleSimple},
		{AndExpr_OrExpr, []gopapageno.TokenType{AndExpr_Factor_OrExpr_Path, AND, AndExpr_Factor_OrExpr}, gopapageno.RuleSimple},
		{AndExpr_OrExpr, []gopapageno.TokenType{AndExpr_Factor_OrExpr_Path, AND, AndExpr_Factor_OrExpr_Path}, gopapageno.RuleSimple},
		{AndExpr_Factor_OrExpr_Path, []gopapageno.TokenType{AndExpr_Factor_OrExpr_Path, CHILD, Step}, gopapageno.RuleSimple},
		{AndExpr_Factor_OrExpr_Path, []gopapageno.TokenType{AndExpr_Factor_OrExpr_Path, CHILD, Step_Test}, gopapageno.RuleSimple},
		{AndExpr_Factor_OrExpr_Path, []gopapageno.TokenType{AndExpr_Factor_OrExpr_Path, DESCENDANT, Step}, gopapageno.RuleSimple},
		{AndExpr_Factor_OrExpr_Path, []gopapageno.TokenType{AndExpr_Factor_OrExpr_Path, DESCENDANT, Step_Test}, gopapageno.RuleSimple},
		{OrExpr, []gopapageno.TokenType{AndExpr_Factor_OrExpr_Path, OR, AndExpr_Factor_OrExpr}, gopapageno.RuleSimple},
		{OrExpr, []gopapageno.TokenType{AndExpr_Factor_OrExpr_Path, OR, AndExpr_Factor_OrExpr_Path}, gopapageno.RuleSimple},
		{OrExpr, []gopapageno.TokenType{AndExpr_Factor_OrExpr_Path, OR, AndExpr_OrExpr}, gopapageno.RuleSimple},
		{AndExpr_Factor_OrExpr_Path, []gopapageno.TokenType{AndExpr_Factor_OrExpr_Path, PARENT, Step}, gopapageno.RuleSimple},
		{AndExpr_Factor_OrExpr_Path, []gopapageno.TokenType{AndExpr_Factor_OrExpr_Path, PARENT, Step_Test}, gopapageno.RuleSimple},
		{OrExpr, []gopapageno.TokenType{AndExpr_OrExpr, OR, AndExpr_Factor_OrExpr}, gopapageno.RuleSimple},
		{OrExpr, []gopapageno.TokenType{AndExpr_OrExpr, OR, AndExpr_Factor_OrExpr_Path}, gopapageno.RuleSimple},
		{OrExpr, []gopapageno.TokenType{AndExpr_OrExpr, OR, AndExpr_OrExpr}, gopapageno.RuleSimple},
		{Step, []gopapageno.TokenType{Step_Test, LBR, AndExpr_Factor_OrExpr, RBR}, gopapageno.RuleSimple},
		{Step, []gopapageno.TokenType{Step_Test, LBR, AndExpr_Factor_OrExpr_Path, RBR}, gopapageno.RuleSimple},
		{Step, []gopapageno.TokenType{Step_Test, LBR, AndExpr_OrExpr, RBR}, gopapageno.RuleSimple},
		{Step, []gopapageno.TokenType{Step_Test, LBR, OrExpr, RBR}, gopapageno.RuleSimple},
		{AndExpr_Factor_OrExpr_Path, []gopapageno.TokenType{ANCESTOR, Step}, gopapageno.RuleSimple},
		{AndExpr_Factor_OrExpr_Path, []gopapageno.TokenType{ANCESTOR, Step_Test}, gopapageno.RuleSimple},
		{Step_Test, []gopapageno.TokenType{AT, IDENT}, gopapageno.RuleSimple},
		{Step_Test, []gopapageno.TokenType{AT, IDENT, EQ, STRING}, gopapageno.RuleSimple},
		{AndExpr_Factor_OrExpr_Path, []gopapageno.TokenType{CHILD, Step}, gopapageno.RuleSimple},
		{AndExpr_Factor_OrExpr_Path, []gopapageno.TokenType{CHILD, Step_Test}, gopapageno.RuleSimple},
		{AndExpr_Factor_OrExpr_Path, []gopapageno.TokenType{DESCENDANT, Step}, gopapageno.RuleSimple},
		{AndExpr_Factor_OrExpr_Path, []gopapageno.TokenType{DESCENDANT, Step_Test}, gopapageno.RuleSimple},
		{Step_Test, []gopapageno.TokenType{IDENT}, gopapageno.RuleSimple},
		{AndExpr_Factor_OrExpr, []gopapageno.TokenType{LPAR, AndExpr_Factor_OrExpr, RPAR}, gopapageno.RuleSimple},
		{AndExpr_Factor_OrExpr, []gopapageno.TokenType{LPAR, AndExpr_Factor_OrExpr_Path, RPAR}, gopapageno.RuleSimple},
		{AndExpr_Factor_OrExpr, []gopapageno.TokenType{LPAR, AndExpr_OrExpr, RPAR}, gopapageno.RuleSimple},
		{AndExpr_Factor_OrExpr, []gopapageno.TokenType{LPAR, OrExpr, RPAR}, gopapageno.RuleSimple},
		{AndExpr_Factor_OrExpr, []gopapageno.TokenType{NOT, AndExpr_Factor_OrExpr_Path}, gopapageno.RuleSimple},
		{AndExpr_Factor_OrExpr, []gopapageno.TokenType{NOT, LPAR, AndExpr_Factor_OrExpr, RPAR}, gopapageno.RuleSimple},
		{AndExpr_Factor_OrExpr, []gopapageno.TokenType{NOT, LPAR, AndExpr_Factor_OrExpr_Path, RPAR}, gopapageno.RuleSimple},
		{AndExpr_Factor_OrExpr, []gopapageno.TokenType{NOT, LPAR, AndExpr_OrExpr, RPAR}, gopapageno.RuleSimple},
		{AndExpr_Factor_OrExpr, []gopapageno.TokenType{NOT, LPAR, OrExpr, RPAR}, gopapageno.RuleSimple},
		{AndExpr_Factor_OrExpr_Path, []gopapageno.TokenType{PARENT, Step}, gopapageno.RuleSimple},
		{AndExpr_Factor_OrExpr_Path, []gopapageno.TokenType{PARENT, Step_Test}, gopapageno.RuleSimple},
		{Step_Test, []gopapageno.TokenType{TEXT}, gopapageno.RuleSimple},
		{Step_Test, []gopapageno.TokenType{TEXT, EQ, STRING}, gopapageno.RuleSimple},
	}
	compressedRules := []uint16{0, 0, 13, 1, 29, 2, 67, 3, 165, 7, 188, 32769, 236, 32771, 249, 32772, 267, 32773, 280, 32775, 293, 32777, 296, 32778, 339, 32780, 392, 32784, 405, 0, 0, 2, 32770, 36, 32779, 49, 0, 0, 2, 1, 43, 2, 46, 3, 0, 0, 3, 1, 0, 0, 0, 3, 1, 58, 2, 61, 3, 64, 4, 2, 0, 4, 3, 0, 4, 4, 0, 0, 0, 6, 32769, 82, 32770, 95, 32772, 108, 32773, 121, 32779, 134, 32780, 152, 0, 0, 2, 6, 89, 7, 92, 2, 5, 0, 2, 6, 0, 0, 0, 2, 1, 102, 2, 105, 3, 7, 0, 3, 8, 0, 0, 0, 2, 6, 115, 7, 118, 2, 9, 0, 2, 10, 0, 0, 0, 2, 6, 128, 7, 131, 2, 11, 0, 2, 12, 0, 0, 0, 3, 1, 143, 2, 146, 3, 149, 4, 13, 0, 4, 14, 0, 4, 15, 0, 0, 0, 2, 6, 159, 7, 162, 2, 16, 0, 2, 17, 0, 0, 0, 1, 32779, 170, 0, 0, 3, 1, 179, 2, 182, 3, 185, 4, 18, 0, 4, 19, 0, 4, 20, 0, 0, 0, 1, 32776, 193, 0, 0, 4, 1, 204, 2, 212, 3, 220, 4, 228, 0, 0, 1, 32781, 209, 6, 21, 0, 0, 0, 1, 32781, 217, 6, 22, 0, 0, 0, 1, 32781, 225, 6, 23, 0, 0, 0, 1, 32781, 233, 6, 24, 0, 0, 0, 2, 6, 243, 7, 246, 2, 25, 0, 2, 26, 0, 0, 0, 1, 32775, 254, 7, 27, 1, 32774, 259, 0, 0, 1, 32783, 264, 7, 28, 0, 0, 0, 2, 6, 274, 7, 277, 2, 29, 0, 2, 30, 0, 0, 0, 2, 6, 287, 7, 290, 2, 31, 0, 2, 32, 0, 7, 33, 0, 0, 0, 4, 1, 307, 2, 315, 3, 323, 4, 331, 0, 0, 1, 32782, 312, 1, 34, 0, 0, 0, 1, 32782, 320, 1, 35, 0, 0, 0, 1, 32782, 328, 1, 36, 0, 0, 0, 1, 32782, 336, 1, 37, 0, 0, 0, 2, 2, 346, 32777, 349, 1, 38, 0, 0, 0, 4, 1, 360, 2, 368, 3, 376, 4, 384, 0, 0, 1, 32782, 365, 1, 39, 0, 0, 0, 1, 32782, 373, 1, 40, 0, 0, 0, 1, 32782, 381, 1, 41, 0, 0, 0, 1, 32782, 389, 1, 42, 0, 0, 0, 2, 6, 399, 7, 402, 2, 43, 0, 2, 44, 0, 7, 45, 1, 32774, 410, 0, 0, 1, 32783, 415, 7, 46, 0	}

	precMatrix := [][]gopapageno.Precedence{
		{gopapageno.PrecEquals, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecYields},
		{gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecYields, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecEmpty, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecEmpty, gopapageno.PrecYields},
		{gopapageno.PrecTakes, gopapageno.PrecYields, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecTakes, gopapageno.PrecYields, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecEmpty, gopapageno.PrecEmpty},
		{gopapageno.PrecTakes, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecEquals, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecEquals, gopapageno.PrecEmpty},
		{gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecYields, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecEmpty, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecEmpty, gopapageno.PrecYields},
		{gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecYields, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecEmpty, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecEmpty, gopapageno.PrecYields},
		{gopapageno.PrecTakes, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecEmpty},
		{gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecEmpty, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecTakes, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecEquals, gopapageno.PrecEmpty},
		{gopapageno.PrecTakes, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecEmpty, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecEquals, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecEmpty},
		{gopapageno.PrecTakes, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecEmpty, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecEmpty, gopapageno.PrecEquals, gopapageno.PrecEmpty, gopapageno.PrecEmpty},
		{gopapageno.PrecTakes, gopapageno.PrecYields, gopapageno.PrecTakes, gopapageno.PrecEmpty, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecTakes, gopapageno.PrecYields, gopapageno.PrecTakes, gopapageno.PrecEquals, gopapageno.PrecEmpty, gopapageno.PrecEmpty},
		{gopapageno.PrecTakes, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecEmpty, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecEmpty, gopapageno.PrecYields, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecEmpty, gopapageno.PrecEmpty},
		{gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecYields, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecEmpty, gopapageno.PrecYields, gopapageno.PrecYields, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecEmpty, gopapageno.PrecYields},
		{gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecEmpty, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecEmpty, gopapageno.PrecEmpty},
		{gopapageno.PrecTakes, gopapageno.PrecEmpty, gopapageno.PrecTakes, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecTakes, gopapageno.PrecEmpty, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecEmpty, gopapageno.PrecEmpty},
		{gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecEmpty, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecTakes, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecEmpty, gopapageno.PrecEmpty},
		{gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecEmpty, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecTakes, gopapageno.PrecEmpty, gopapageno.PrecEmpty, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecTakes, gopapageno.PrecEquals, gopapageno.PrecEmpty},
	}
	bitPackedMatrix := []uint64{
		12251244168589170004, 560916877412, 372014444257634816, 9406471509205066922, 1465923139083307680, 5008169912785438032, 12189697498038289665, 9405767830901227560, 3063021872248554122, 4, 
	}

	fn := func(ruleDescription uint16, ruleFlags gopapageno.RuleFlags, lhs *gopapageno.Token, rhs []*gopapageno.Token, thread int){
		switch ruleDescription {
		case 0:
			AndExpr_OrExpr0 := lhs
			AndExpr_Factor_OrExpr1 := rhs[0]
			AND2 := rhs[1]
			AndExpr_Factor_OrExpr3 := rhs[2]

			AndExpr_OrExpr0.Child = AndExpr_Factor_OrExpr1
			AndExpr_Factor_OrExpr1.Next = AND2
			AND2.Next = AndExpr_Factor_OrExpr3
			AndExpr_OrExpr0.LastChild = AndExpr_Factor_OrExpr3

			{
				AndExpr_OrExpr0.Value = combine(and(), AndExpr_Factor_OrExpr1.Value.(predicate), AndExpr_Factor_OrExpr3.Value.(predicate))
			}
			_ = AndExpr_Factor_OrExpr1
			_ = AND2
			_ = AndExpr_Factor_OrExpr3
		case 1:
			AndExpr_OrExpr0 := lhs
			AndExpr_Factor_OrExpr1 := rhs[0]
			AND2 := rhs[1]
			AndExpr_Factor_OrExpr_Path3 := rhs[2]

			AndExpr_OrExpr0.Child = AndExpr_Factor_OrExpr1
			AndExpr_Factor_OrExpr1.Next = AND2
			AND2.Next = AndExpr_Factor_OrExpr_Path3
			AndExpr_OrExpr0.LastChild = AndExpr_Factor_OrExpr_Path3

			{
				AndExpr_OrExpr0.Value = combine(and(), AndExpr_Factor_OrExpr1.Value.(predicate), AndExpr_Factor_OrExpr_Path3.Value.(predicate))
			}
			_ = AndExpr_Factor_OrExpr1
			_ = AND2
			_ = AndExpr_Factor_OrExpr_Path3
		case 2:
			OrExpr0 := lhs
			AndExpr_Factor_OrExpr1 := rhs[0]
			OR2 := rhs[1]
			AndExpr_Factor_OrExpr3 := rhs[2]

			OrExpr0.Child = AndExpr_Factor_OrExpr1
			AndExpr_Factor_OrExpr1.Next = OR2
			OR2.Next = AndExpr_Factor_OrExpr3
			OrExpr0.LastChild = AndExpr_Factor_OrExpr3

			{
				OrExpr0.Value = combine(or(), AndExpr_Factor_OrExpr1.Value.(predicate), AndExpr_Factor_OrExpr3.Value.(predicate))
			}
			_ = AndExpr_Factor_OrExpr1
			_ = OR2
			_ = AndExpr_Factor_OrExpr3
		case 3:
			OrExpr0 := lhs
			AndExpr_Factor_OrExpr1 := rhs[0]
			OR2 := rhs[1]
			AndExpr_Factor_OrExpr_Path3 := rhs[2]

			OrExpr0.Child = AndExpr_Factor_OrExpr1
			AndExpr_Factor_OrExpr1.Next = OR2
			OR2.Next = AndExpr_Factor_OrExpr_Path3
			OrExpr0.LastChild = AndExpr_Factor_OrExpr_Path3

			{
				OrExpr0.Value = combine(or(), AndExpr_Factor_OrExpr1.Value.(predicate), AndExpr_Factor_OrExpr_Path3.Value.(predicate))
			}
			_ = AndExpr_Factor_OrExpr1
			_ = OR2
			_ = AndExpr_Factor_OrExpr_Path3
		case 4:
			OrExpr0 := lhs
			AndExpr_Factor_OrExpr1 := rhs[0]
			OR2 := rhs[1]
			AndExpr_OrExpr3 := rhs[2]

			OrExpr0.Child = AndExpr_Factor_OrExpr1
			AndExpr_Factor_OrExpr1.Next = OR2
			OR2.Next = AndExpr_OrExpr3
			OrExpr0.LastChild = AndExpr_OrExpr3

			{
				OrExpr0.Value = combine(or(), AndExpr_Factor_OrExpr1.Value.(predicate), AndExpr_OrExpr3.Value.(predicate))
			}
			_ = AndExpr_Factor_OrExpr1
			_ = OR2
			_ = AndExpr_OrExpr3
		case 5:
			AndExpr_Factor_OrExpr_Path0 := lhs
			AndExpr_Factor_OrExpr_Path1 := rhs[0]
			ANCESTOR2 := rhs[1]
			Step3 := rhs[2]

			AndExpr_Factor_OrExpr_Path0.Child = AndExpr_Factor_OrExpr_Path1
			AndExpr_Factor_OrExpr_Path1.Next = ANCESTOR2
			ANCESTOR2.Next = Step3
			AndExpr_Factor_OrExpr_Path0.LastChild = Step3

			{
				AndExpr_Factor_OrExpr_Path0.Value = appendStep(AndExpr_Factor_OrExpr_Path1.Value.(*peSemValue), Step3.Value.(udpeTest), ancestorOrSelf)
			}
			_ = AndExpr_Factor_OrExpr_Path1
			_ = ANCESTOR2
			_ = Step3
		case 6:
			AndExpr_Factor_OrExpr_Path0 := lhs
			AndExpr_Factor_OrExpr_Path1 := rhs[0]
			ANCESTOR2 := rhs[1]
			Step_Test3 := rhs[2]

			AndExpr_Factor_OrExpr_Path0.Child = AndExpr_Factor_OrExpr_Path1
			AndExpr_Factor_OrExpr_Path1.Next = ANCESTOR2
			ANCESTOR2.Next = Step_Test3
			AndExpr_Factor_OrExpr_Path0.LastChild = Step_Test3

			{
				AndExpr_Factor_OrExpr_Path0.Value = appendStep(AndExpr_Factor_OrExpr_Path1.Value.(*peSemValue), Step_Test3.Value.(udpeTest), ancestorOrSelf)
			}
			_ = AndExpr_Factor_OrExpr_Path1
			_ = ANCESTOR2
			_ = Step_Test3
		case 7:
			AndExpr_OrExpr0 := lhs
			AndExpr_Factor_OrExpr_Path1 := rhs[0]
			AND2 := rhs[1]
			AndExpr_Factor_OrExpr3 := rhs[2]

			AndExpr_OrExpr0.Child = AndExpr_Factor_OrExpr_Path1
			AndExpr_Factor_OrExpr_Path1.Next = AND2
			AND2.Next = AndExpr_Factor_OrExpr3
			AndExpr_OrExpr0.LastChild = AndExpr_Factor_OrExpr3

			{
				AndExpr_OrExpr0.Value = combine(and(), AndExpr_Factor_OrExpr_Path1.Value.(predicate), AndExpr_Factor_OrExpr3.Value.(predicate))
			}
			_ = AndExpr_Factor_OrExpr_Path1
			_ = AND2
			_ = AndExpr_Factor_OrExpr3
		case 8:
			AndExpr_OrExpr0 := lhs
			AndExpr_Factor_OrExpr_Path1 := rhs[0]
			AND2 := rhs[1]
			AndExpr_Factor_OrExpr_Path3 := rhs[2]

			AndExpr_OrExpr0.Child = AndExpr_Factor_OrExpr_Path1
			AndExpr_Factor_OrExpr_Path1.Next = AND2
			AND2.Next = AndExpr_Factor_OrExpr_Path3
			AndExpr_OrExpr0.LastChild = AndExpr_Factor_OrExpr_Path3

			{
				AndExpr_OrExpr0.Value = combine(and(), AndExpr_Factor_OrExpr_Path1.Value.(predicate), AndExpr_Factor_OrExpr_Path3.Value.(predicate))
			}
			_ = AndExpr_Factor_OrExpr_Path1
			_ = AND2
			_ = AndExpr_Factor_OrExpr_Path3
		case 9:
			AndExpr_Factor_OrExpr_Path0 := lhs
			AndExpr_Factor_OrExpr_Path1 := rhs[0]
			CHILD2 := rhs[1]
			Step3 := rhs[2]

			AndExpr_Factor_OrExpr_Path0.Child = AndExpr_Factor_OrExpr_Path1
			AndExpr_Factor_OrExpr_Path1.Next = CHILD2
			CHILD2.Next = Step3
			AndExpr_Factor_OrExpr_Path0.LastChild = Step3

			{
				AndExpr_Factor_OrExpr_Path0.Value = appendStep(AndExpr_Factor_OrExpr_Path1.Value.(*peSemValue), Step3.Value.(udpeTest), child)
			}
			_ = AndExpr_Factor_OrExpr_Path1
			_ = CHILD2
			_ = Step3
		case 10:
			AndExpr_Factor_OrExpr_Path0 := lhs
			AndExpr_Factor_OrExpr_Path1 := rhs[0]
			CHILD2 := rhs[1]
			Step_Test3 := rhs[2]

			AndExpr_Factor_OrExpr_Path0.Child = AndExpr_Factor_OrExpr_Path1
			AndExpr_Factor_OrExpr_Path1.Next = CHILD2
			CHILD2.Next = Step_Test3
			AndExpr_Factor_OrExpr_Path0.LastChild = Step_Test3

			{
				AndExpr_Factor_OrExpr_Path0.Value = appendStep(AndExpr_Factor_OrExpr_Path1.Value.(*peSemValue), Step_Test3.Value.(udpeTest), child)
			}
			_ = AndExpr_Factor_OrExpr_Path1
			_ = CHILD2
			_ = Step_Test3
		case 11:
			AndExpr_Factor_OrExpr_Path0 := lhs
			AndExpr_Factor_OrExpr_Path1 := rhs[0]
			DESCENDANT2 := rhs[1]
			Step3 := rhs[2]

			AndExpr_Factor_OrExpr_Path0.Child = AndExpr_Factor_OrExpr_Path1
			AndExpr_Factor_OrExpr_Path1.Next = DESCENDANT2
			DESCENDANT2.Next = Step3
			AndExpr_Factor_OrExpr_Path0.LastChild = Step3

			{
				AndExpr_Factor_OrExpr_Path0.Value = appendStep(AndExpr_Factor_OrExpr_Path1.Value.(*peSemValue), Step3.Value.(udpeTest), descendantOrSelf)
			}
			_ = AndExpr_Factor_OrExpr_Path1
			_ = DESCENDANT2
			_ = Step3
		case 12:
			AndExpr_Factor_OrExpr_Path0 := lhs
			AndExpr_Factor_OrExpr_Path1 := rhs[0]
			DESCENDANT2 := rhs[1]
			Step_Test3 := rhs[2]

			AndExpr_Factor_OrExpr_Path0.Child = AndExpr_Factor_OrExpr_Path1
			AndExpr_Factor_OrExpr_Path1.Next = DESCENDANT2
			DESCENDANT2.Next = Step_Test3
			AndExpr_Factor_OrExpr_Path0.LastChild = Step_Test3

			{
				AndExpr_Factor_OrExpr_Path0.Value = appendStep(AndExpr_Factor_OrExpr_Path1.Value.(*peSemValue), Step_Test3.Value.(udpeTest), descendantOrSelf)
			}
			_ = AndExpr_Factor_OrExpr_Path1
			_ = DESCENDANT2
			_ = Step_Test3
		case 13:
			OrExpr0 := lhs
			AndExpr_Factor_OrExpr_Path1 := rhs[0]
			OR2 := rhs[1]
			AndExpr_Factor_OrExpr3 := rhs[2]

			OrExpr0.Child = AndExpr_Factor_OrExpr_Path1
			AndExpr_Factor_OrExpr_Path1.Next = OR2
			OR2.Next = AndExpr_Factor_OrExpr3
			OrExpr0.LastChild = AndExpr_Factor_OrExpr3

			{
				OrExpr0.Value = combine(or(), AndExpr_Factor_OrExpr_Path1.Value.(predicate), AndExpr_Factor_OrExpr3.Value.(predicate))
			}
			_ = AndExpr_Factor_OrExpr_Path1
			_ = OR2
			_ = AndExpr_Factor_OrExpr3
		case 14:
			OrExpr0 := lhs
			AndExpr_Factor_OrExpr_Path1 := rhs[0]
			OR2 := rhs[1]
			AndExpr_Factor_OrExpr_Path3 := rhs[2]

			OrExpr0.Child = AndExpr_Factor_OrExpr_Path1
			AndExpr_Factor_OrExpr_Path1.Next = OR2
			OR2.Next = AndExpr_Factor_OrExpr_Path3
			OrExpr0.LastChild = AndExpr_Factor_OrExpr_Path3

			{
				OrExpr0.Value = combine(or(), AndExpr_Factor_OrExpr_Path1.Value.(predicate), AndExpr_Factor_OrExpr_Path3.Value.(predicate))
			}
			_ = AndExpr_Factor_OrExpr_Path1
			_ = OR2
			_ = AndExpr_Factor_OrExpr_Path3
		case 15:
			OrExpr0 := lhs
			AndExpr_Factor_OrExpr_Path1 := rhs[0]
			OR2 := rhs[1]
			AndExpr_OrExpr3 := rhs[2]

			OrExpr0.Child = AndExpr_Factor_OrExpr_Path1
			AndExpr_Factor_OrExpr_Path1.Next = OR2
			OR2.Next = AndExpr_OrExpr3
			OrExpr0.LastChild = AndExpr_OrExpr3

			{
				OrExpr0.Value = combine(or(), AndExpr_Factor_OrExpr_Path1.Value.(predicate), AndExpr_OrExpr3.Value.(predicate))
			}
			_ = AndExpr_Factor_OrExpr_Path1
			_ = OR2
			_ = AndExpr_OrExpr3
		case 16:
			AndExpr_Factor_OrExpr_Path0 := lhs
			AndExpr_Factor_OrExpr_Path1 := rhs[0]
			PARENT2 := rhs[1]
			Step3 := rhs[2]

			AndExpr_Factor_OrExpr_Path0.Child = AndExpr_Factor_OrExpr_Path1
			AndExpr_Factor_OrExpr_Path1.Next = PARENT2
			PARENT2.Next = Step3
			AndExpr_Factor_OrExpr_Path0.LastChild = Step3

			{
				AndExpr_Factor_OrExpr_Path0.Value = appendStep(AndExpr_Factor_OrExpr_Path1.Value.(*peSemValue), Step3.Value.(udpeTest), parent)
			}
			_ = AndExpr_Factor_OrExpr_Path1
			_ = PARENT2
			_ = Step3
		case 17:
			AndExpr_Factor_OrExpr_Path0 := lhs
			AndExpr_Factor_OrExpr_Path1 := rhs[0]
			PARENT2 := rhs[1]
			Step_Test3 := rhs[2]

			AndExpr_Factor_OrExpr_Path0.Child = AndExpr_Factor_OrExpr_Path1
			AndExpr_Factor_OrExpr_Path1.Next = PARENT2
			PARENT2.Next = Step_Test3
			AndExpr_Factor_OrExpr_Path0.LastChild = Step_Test3

			{
				AndExpr_Factor_OrExpr_Path0.Value = appendStep(AndExpr_Factor_OrExpr_Path1.Value.(*peSemValue), Step_Test3.Value.(udpeTest), parent)
			}
			_ = AndExpr_Factor_OrExpr_Path1
			_ = PARENT2
			_ = Step_Test3
		case 18:
			OrExpr0 := lhs
			AndExpr_OrExpr1 := rhs[0]
			OR2 := rhs[1]
			AndExpr_Factor_OrExpr3 := rhs[2]

			OrExpr0.Child = AndExpr_OrExpr1
			AndExpr_OrExpr1.Next = OR2
			OR2.Next = AndExpr_Factor_OrExpr3
			OrExpr0.LastChild = AndExpr_Factor_OrExpr3

			{
				OrExpr0.Value = combine(or(), AndExpr_OrExpr1.Value.(predicate), AndExpr_Factor_OrExpr3.Value.(predicate))
			}
			_ = AndExpr_OrExpr1
			_ = OR2
			_ = AndExpr_Factor_OrExpr3
		case 19:
			OrExpr0 := lhs
			AndExpr_OrExpr1 := rhs[0]
			OR2 := rhs[1]
			AndExpr_Factor_OrExpr_Path3 := rhs[2]

			OrExpr0.Child = AndExpr_OrExpr1
			AndExpr_OrExpr1.Next = OR2
			OR2.Next = AndExpr_Factor_OrExpr_Path3
			OrExpr0.LastChild = AndExpr_Factor_OrExpr_Path3

			{
				OrExpr0.Value = combine(or(), AndExpr_OrExpr1.Value.(predicate), AndExpr_Factor_OrExpr_Path3.Value.(predicate))
			}
			_ = AndExpr_OrExpr1
			_ = OR2
			_ = AndExpr_Factor_OrExpr_Path3
		case 20:
			OrExpr0 := lhs
			AndExpr_OrExpr1 := rhs[0]
			OR2 := rhs[1]
			AndExpr_OrExpr3 := rhs[2]

			OrExpr0.Child = AndExpr_OrExpr1
			AndExpr_OrExpr1.Next = OR2
			OR2.Next = AndExpr_OrExpr3
			OrExpr0.LastChild = AndExpr_OrExpr3

			{
				OrExpr0.Value = combine(or(), AndExpr_OrExpr1.Value.(predicate), AndExpr_OrExpr3.Value.(predicate))
			}
			_ = AndExpr_OrExpr1
			_ = OR2
			_ = AndExpr_OrExpr3
		case 21:
			Step0 := lhs
			Step_Test1 := rhs[0]
			LBR2 := rhs[1]
			AndExpr_Factor_OrExpr3 := rhs[2]
			RBR4 := rhs[3]

			Step0.Child = Step_Test1
			Step_Test1.Next = LBR2
			LBR2.Next = AndExpr_Factor_OrExpr3
			AndExpr_Factor_OrExpr3.Next = RBR4
			Step0.LastChild = RBR4

			{
				switch Step_Test1.Value.(type) {
				case *elementTest:
					Step_Test1.Value.(*elementTest).pred = AndExpr_Factor_OrExpr3.Value.(*predicate)
				case *textTest:
					Step_Test1.Value.(*elementTest).pred = nil
				default:
					panic("unknown test type")
				}
				Step0.Value = Step_Test1.Value
			}
			_ = Step_Test1
			_ = LBR2
			_ = AndExpr_Factor_OrExpr3
			_ = RBR4
		case 22:
			Step0 := lhs
			Step_Test1 := rhs[0]
			LBR2 := rhs[1]
			AndExpr_Factor_OrExpr_Path3 := rhs[2]
			RBR4 := rhs[3]

			Step0.Child = Step_Test1
			Step_Test1.Next = LBR2
			LBR2.Next = AndExpr_Factor_OrExpr_Path3
			AndExpr_Factor_OrExpr_Path3.Next = RBR4
			Step0.LastChild = RBR4

			{
				switch Step_Test1.Value.(type) {
				case *elementTest:
					Step_Test1.Value.(*elementTest).pred = AndExpr_Factor_OrExpr_Path3.Value.(*predicate)
				case *textTest:
					Step_Test1.Value.(*elementTest).pred = nil
				default:
					panic("unknown test type")
				}
				Step0.Value = Step_Test1.Value
			}
			_ = Step_Test1
			_ = LBR2
			_ = AndExpr_Factor_OrExpr_Path3
			_ = RBR4
		case 23:
			Step0 := lhs
			Step_Test1 := rhs[0]
			LBR2 := rhs[1]
			AndExpr_OrExpr3 := rhs[2]
			RBR4 := rhs[3]

			Step0.Child = Step_Test1
			Step_Test1.Next = LBR2
			LBR2.Next = AndExpr_OrExpr3
			AndExpr_OrExpr3.Next = RBR4
			Step0.LastChild = RBR4

			{
				switch Step_Test1.Value.(type) {
				case *elementTest:
					Step_Test1.Value.(*elementTest).pred = AndExpr_OrExpr3.Value.(*predicate)
				case *textTest:
					Step_Test1.Value.(*elementTest).pred = nil
				default:
					panic("unknown test type")
				}
				Step0.Value = Step_Test1.Value
			}
			_ = Step_Test1
			_ = LBR2
			_ = AndExpr_OrExpr3
			_ = RBR4
		case 24:
			Step0 := lhs
			Step_Test1 := rhs[0]
			LBR2 := rhs[1]
			OrExpr3 := rhs[2]
			RBR4 := rhs[3]

			Step0.Child = Step_Test1
			Step_Test1.Next = LBR2
			LBR2.Next = OrExpr3
			OrExpr3.Next = RBR4
			Step0.LastChild = RBR4

			{
				switch Step_Test1.Value.(type) {
				case *elementTest:
					Step_Test1.Value.(*elementTest).pred = OrExpr3.Value.(*predicate)
				case *textTest:
					Step_Test1.Value.(*elementTest).pred = nil
				default:
					panic("unknown test type")
				}
				Step0.Value = Step_Test1.Value
			}
			_ = Step_Test1
			_ = LBR2
			_ = OrExpr3
			_ = RBR4
		case 25:
			AndExpr_Factor_OrExpr_Path0 := lhs
			ANCESTOR1 := rhs[0]
			Step2 := rhs[1]

			AndExpr_Factor_OrExpr_Path0.Child = ANCESTOR1
			ANCESTOR1.Next = Step2
			AndExpr_Factor_OrExpr_Path0.LastChild = Step2

			{
				AndExpr_Factor_OrExpr_Path0.Value = appendStep(nil, Step2.Value.(udpeTest), ancestorOrSelf)
			}
			_ = ANCESTOR1
			_ = Step2
		case 26:
			AndExpr_Factor_OrExpr_Path0 := lhs
			ANCESTOR1 := rhs[0]
			Step_Test2 := rhs[1]

			AndExpr_Factor_OrExpr_Path0.Child = ANCESTOR1
			ANCESTOR1.Next = Step_Test2
			AndExpr_Factor_OrExpr_Path0.LastChild = Step_Test2

			{
				AndExpr_Factor_OrExpr_Path0.Value = appendStep(nil, Step_Test2.Value.(udpeTest), ancestorOrSelf)
			}
			_ = ANCESTOR1
			_ = Step_Test2
		case 27:
			Step_Test0 := lhs
			AT1 := rhs[0]
			IDENT2 := rhs[1]

			Step_Test0.Child = AT1
			AT1.Next = IDENT2
			Step_Test0.LastChild = IDENT2

			{
				Step_Test0.Value = newElementTest("*", &Attribute{Key: IDENT2.Value.(string)}, nil)
			}
			_ = AT1
			_ = IDENT2
		case 28:
			Step_Test0 := lhs
			AT1 := rhs[0]
			IDENT2 := rhs[1]
			EQ3 := rhs[2]
			STRING4 := rhs[3]

			Step_Test0.Child = AT1
			AT1.Next = IDENT2
			IDENT2.Next = EQ3
			EQ3.Next = STRING4
			Step_Test0.LastChild = STRING4

			{
				Step_Test0.Value = newElementTest("*", &Attribute{Key: IDENT2.Value.(string), Value: EQ3.Value.(string)}, nil)
			}
			_ = AT1
			_ = IDENT2
			_ = EQ3
			_ = STRING4
		case 29:
			AndExpr_Factor_OrExpr_Path0 := lhs
			CHILD1 := rhs[0]
			Step2 := rhs[1]

			AndExpr_Factor_OrExpr_Path0.Child = CHILD1
			CHILD1.Next = Step2
			AndExpr_Factor_OrExpr_Path0.LastChild = Step2

			{
				AndExpr_Factor_OrExpr_Path0.Value = appendStep(nil, Step2.Value.(udpeTest), child)
			}
			_ = CHILD1
			_ = Step2
		case 30:
			AndExpr_Factor_OrExpr_Path0 := lhs
			CHILD1 := rhs[0]
			Step_Test2 := rhs[1]

			AndExpr_Factor_OrExpr_Path0.Child = CHILD1
			CHILD1.Next = Step_Test2
			AndExpr_Factor_OrExpr_Path0.LastChild = Step_Test2

			{
				AndExpr_Factor_OrExpr_Path0.Value = appendStep(nil, Step_Test2.Value.(udpeTest), child)
			}
			_ = CHILD1
			_ = Step_Test2
		case 31:
			AndExpr_Factor_OrExpr_Path0 := lhs
			DESCENDANT1 := rhs[0]
			Step2 := rhs[1]

			AndExpr_Factor_OrExpr_Path0.Child = DESCENDANT1
			DESCENDANT1.Next = Step2
			AndExpr_Factor_OrExpr_Path0.LastChild = Step2

			{
				AndExpr_Factor_OrExpr_Path0.Value = appendStep(nil, Step2.Value.(udpeTest), descendantOrSelf)
			}
			_ = DESCENDANT1
			_ = Step2
		case 32:
			AndExpr_Factor_OrExpr_Path0 := lhs
			DESCENDANT1 := rhs[0]
			Step_Test2 := rhs[1]

			AndExpr_Factor_OrExpr_Path0.Child = DESCENDANT1
			DESCENDANT1.Next = Step_Test2
			AndExpr_Factor_OrExpr_Path0.LastChild = Step_Test2

			{
				AndExpr_Factor_OrExpr_Path0.Value = appendStep(nil, Step_Test2.Value.(udpeTest), descendantOrSelf)
			}
			_ = DESCENDANT1
			_ = Step_Test2
		case 33:
			Step_Test0 := lhs
			IDENT1 := rhs[0]

			Step_Test0.Child = IDENT1
			Step_Test0.LastChild = IDENT1

			{
				Step_Test0.Value = newElementTest(IDENT1.Value.(string), nil, nil)
			}
			_ = IDENT1
		case 34:
			AndExpr_Factor_OrExpr0 := lhs
			LPAR1 := rhs[0]
			AndExpr_Factor_OrExpr2 := rhs[1]
			RPAR3 := rhs[2]

			AndExpr_Factor_OrExpr0.Child = LPAR1
			LPAR1.Next = AndExpr_Factor_OrExpr2
			AndExpr_Factor_OrExpr2.Next = RPAR3
			AndExpr_Factor_OrExpr0.LastChild = RPAR3

			{
				AndExpr_Factor_OrExpr0.Value = AndExpr_Factor_OrExpr2.Value
			}
			_ = LPAR1
			_ = AndExpr_Factor_OrExpr2
			_ = RPAR3
		case 35:
			AndExpr_Factor_OrExpr0 := lhs
			LPAR1 := rhs[0]
			AndExpr_Factor_OrExpr_Path2 := rhs[1]
			RPAR3 := rhs[2]

			AndExpr_Factor_OrExpr0.Child = LPAR1
			LPAR1.Next = AndExpr_Factor_OrExpr_Path2
			AndExpr_Factor_OrExpr_Path2.Next = RPAR3
			AndExpr_Factor_OrExpr0.LastChild = RPAR3

			{
				AndExpr_Factor_OrExpr0.Value = AndExpr_Factor_OrExpr_Path2.Value
			}
			_ = LPAR1
			_ = AndExpr_Factor_OrExpr_Path2
			_ = RPAR3
		case 36:
			AndExpr_Factor_OrExpr0 := lhs
			LPAR1 := rhs[0]
			AndExpr_OrExpr2 := rhs[1]
			RPAR3 := rhs[2]

			AndExpr_Factor_OrExpr0.Child = LPAR1
			LPAR1.Next = AndExpr_OrExpr2
			AndExpr_OrExpr2.Next = RPAR3
			AndExpr_Factor_OrExpr0.LastChild = RPAR3

			{
				AndExpr_Factor_OrExpr0.Value = AndExpr_OrExpr2.Value
			}
			_ = LPAR1
			_ = AndExpr_OrExpr2
			_ = RPAR3
		case 37:
			AndExpr_Factor_OrExpr0 := lhs
			LPAR1 := rhs[0]
			OrExpr2 := rhs[1]
			RPAR3 := rhs[2]

			AndExpr_Factor_OrExpr0.Child = LPAR1
			LPAR1.Next = OrExpr2
			OrExpr2.Next = RPAR3
			AndExpr_Factor_OrExpr0.LastChild = RPAR3

			{
				AndExpr_Factor_OrExpr0.Value = OrExpr2.Value
			}
			_ = LPAR1
			_ = OrExpr2
			_ = RPAR3
		case 38:
			AndExpr_Factor_OrExpr0 := lhs
			NOT1 := rhs[0]
			AndExpr_Factor_OrExpr_Path2 := rhs[1]

			AndExpr_Factor_OrExpr0.Child = NOT1
			NOT1.Next = AndExpr_Factor_OrExpr_Path2
			AndExpr_Factor_OrExpr0.LastChild = AndExpr_Factor_OrExpr_Path2

			{
				AndExpr_Factor_OrExpr0.Value = notNode(newAtom(AndExpr_Factor_OrExpr_Path2.Value.(peSemValue).end()))
			}
			_ = NOT1
			_ = AndExpr_Factor_OrExpr_Path2
		case 39:
			AndExpr_Factor_OrExpr0 := lhs
			NOT1 := rhs[0]
			LPAR2 := rhs[1]
			AndExpr_Factor_OrExpr3 := rhs[2]
			RPAR4 := rhs[3]

			AndExpr_Factor_OrExpr0.Child = NOT1
			NOT1.Next = LPAR2
			LPAR2.Next = AndExpr_Factor_OrExpr3
			AndExpr_Factor_OrExpr3.Next = RPAR4
			AndExpr_Factor_OrExpr0.LastChild = RPAR4

			{
				AndExpr_Factor_OrExpr0.Value = notNode(AndExpr_Factor_OrExpr3.Value.(predicate))
			}
			_ = NOT1
			_ = LPAR2
			_ = AndExpr_Factor_OrExpr3
			_ = RPAR4
		case 40:
			AndExpr_Factor_OrExpr0 := lhs
			NOT1 := rhs[0]
			LPAR2 := rhs[1]
			AndExpr_Factor_OrExpr_Path3 := rhs[2]
			RPAR4 := rhs[3]

			AndExpr_Factor_OrExpr0.Child = NOT1
			NOT1.Next = LPAR2
			LPAR2.Next = AndExpr_Factor_OrExpr_Path3
			AndExpr_Factor_OrExpr_Path3.Next = RPAR4
			AndExpr_Factor_OrExpr0.LastChild = RPAR4

			{
				AndExpr_Factor_OrExpr0.Value = notNode(AndExpr_Factor_OrExpr_Path3.Value.(predicate))
			}
			_ = NOT1
			_ = LPAR2
			_ = AndExpr_Factor_OrExpr_Path3
			_ = RPAR4
		case 41:
			AndExpr_Factor_OrExpr0 := lhs
			NOT1 := rhs[0]
			LPAR2 := rhs[1]
			AndExpr_OrExpr3 := rhs[2]
			RPAR4 := rhs[3]

			AndExpr_Factor_OrExpr0.Child = NOT1
			NOT1.Next = LPAR2
			LPAR2.Next = AndExpr_OrExpr3
			AndExpr_OrExpr3.Next = RPAR4
			AndExpr_Factor_OrExpr0.LastChild = RPAR4

			{
				AndExpr_Factor_OrExpr0.Value = notNode(AndExpr_OrExpr3.Value.(predicate))
			}
			_ = NOT1
			_ = LPAR2
			_ = AndExpr_OrExpr3
			_ = RPAR4
		case 42:
			AndExpr_Factor_OrExpr0 := lhs
			NOT1 := rhs[0]
			LPAR2 := rhs[1]
			OrExpr3 := rhs[2]
			RPAR4 := rhs[3]

			AndExpr_Factor_OrExpr0.Child = NOT1
			NOT1.Next = LPAR2
			LPAR2.Next = OrExpr3
			OrExpr3.Next = RPAR4
			AndExpr_Factor_OrExpr0.LastChild = RPAR4

			{
				AndExpr_Factor_OrExpr0.Value = notNode(OrExpr3.Value.(predicate))
			}
			_ = NOT1
			_ = LPAR2
			_ = OrExpr3
			_ = RPAR4
		case 43:
			AndExpr_Factor_OrExpr_Path0 := lhs
			PARENT1 := rhs[0]
			Step2 := rhs[1]

			AndExpr_Factor_OrExpr_Path0.Child = PARENT1
			PARENT1.Next = Step2
			AndExpr_Factor_OrExpr_Path0.LastChild = Step2

			{
				AndExpr_Factor_OrExpr_Path0.Value = appendStep(nil, Step2.Value.(udpeTest), parent)
			}
			_ = PARENT1
			_ = Step2
		case 44:
			AndExpr_Factor_OrExpr_Path0 := lhs
			PARENT1 := rhs[0]
			Step_Test2 := rhs[1]

			AndExpr_Factor_OrExpr_Path0.Child = PARENT1
			PARENT1.Next = Step_Test2
			AndExpr_Factor_OrExpr_Path0.LastChild = Step_Test2

			{
				AndExpr_Factor_OrExpr_Path0.Value = appendStep(nil, Step_Test2.Value.(udpeTest), parent)
			}
			_ = PARENT1
			_ = Step_Test2
		case 45:
			Step_Test0 := lhs
			TEXT1 := rhs[0]

			Step_Test0.Child = TEXT1
			Step_Test0.LastChild = TEXT1

			{
				Step_Test0.Value = newTextTest("")
			}
			_ = TEXT1
		case 46:
			Step_Test0 := lhs
			TEXT1 := rhs[0]
			EQ2 := rhs[1]
			STRING3 := rhs[2]

			Step_Test0.Child = TEXT1
			TEXT1.Next = EQ2
			EQ2.Next = STRING3
			Step_Test0.LastChild = STRING3

			{
				Step_Test0.Value = newTextTest(EQ2.Value.(string))
			}
			_ = TEXT1
			_ = EQ2
			_ = STRING3
		}
		_ = ruleFlags
	}

	return &gopapageno.Grammar{
		NumTerminals:  numTerminals,
		NumNonterminals: numNonTerminals,
		MaxRHSLength: maxRHSLen,
		Rules: rules,
		CompressedRules: compressedRules,
		PrecedenceMatrix: precMatrix,
		BitPackedPrecedenceMatrix: bitPackedMatrix,
		Func: fn,
		ParsingStrategy: gopapageno.OPP,
		PreambleFunc: ParserPreallocMem,
	}
}

